spring.datasource.url=jdbc:mysql://localhost/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root

#usado para o jpa gerar automaticamento o schema e aplicar na criacao do banco
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update


#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create


#faz o jpa criar um arquivo ddlV5__criacao_tabelas_pedido.sql com tudo que ele usou para mapear o banco, util para subir migrations
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl_jpa_generate.sql

#flyway achar os arquivos
spring.flyway.locations=classpath:db/migration,classpath:db/teste-data

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

#isso serve para falhar sempre que em uma requisicao json
#receber argumentos que nao sao aceitos, ex: em um put de restaurante receber o campo
#descricao, sendo que nao tenho esse campo na model
spring.jackson.deserialization.fail-on-unknown-properties=true


#a nao deixa inserir os campos se eles estiverem com o JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true


#isso faz com que o spring lance uma exception quando um caminho que nao existe
#seja requisitado
spring.mvc.throw-exception-if-no-handler-found=true
#esse aqui desabilita arquivos staticos que podem atrapalhar nas requisicoes de path
spring.web.resources.add-mappings=false




#serve para mudar o tamanho maximo da requisicao por arquivo, padarao 1 mb
#spring.servlet.multipart.max-file-size=20KB
#tamanho maximo da requicisao completa, padrao 10mb
#spring.servlet.multipart.max-request-size=20MB



#minhas proprias variaveis
algafood.storage.local.diretorio-fotos=/Users/pinheiro/Downloads/download_testes/



#host smtp do servidor de email
spring.mail.host=smtp.sendgrid.net
spring.mail.port=587
spring.mail.username=apikey
# o certo é por a chave nas variaveis de ambiente do intelij ou qualquer outra ide/Producao/ test, só clicar na
# chave em baixo do play na parte de baixo
#spring.mail.password=essa_é_uma_chave_teste_enquanto_nao_sou_aprovado_no_sendgrid


algafood.email.remetente=Algafood <pinheiromikael96@gmail.com>


#configurar o envio de email
algafood.email.impl=FAKE

algafood.email.sandbox.destinatario=inglezinho1@gmail.com



#com isso eu adicionao v1 ao caminho base, e consigo versionar toda a api,
# deixei desativada pq se nao ia ter que refatorar os testes
#server.servlet.context-path=/v1


#usuario e senha padrao do basic autentication, codificar em base64 user:senha e mandar com
#Header Autorization e Basic antes do codigo, exemplo em listar cozinha
#spring.security.user.name=algafood
#spring.security.user.password=123456

#deixar comentado por hora, mas é da seguranca
#algafood.auth.provider-url=http://localhost:8080


#uri de quem assina o token
#spring.security.oauth2.resourceserver.opaque-token.introspection-uri=http://localhost:8081/oauth2/introspect
# id e senha do resource server(api) no server de autorizacao
#spring.security.oauth2.resourceserver.opaque-token.client-id=algafood-backend
#spring.security.oauth2.resourceserver.opaque-token.client-secret=123

#valida jwt, posso validar ou pelolink, que ele vai chamar o server auth, ou pela chave pub local
#openssl x509 -pubkey --noout  -in algafood-cert.pem > algafood_pub_key.pem -> serve para gerar a chave publica, a partir do certificado
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8081/oauth2/jwks
spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:key/algafood_pub_key.pem



