spring.datasource.url=jdbc:mysql://localhost:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root

#usado para o jpa gerar automaticamento o schema e aplicar na criacao do banco
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update


#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create


#faz o jpa criar um arquivo ddlV5__criacao_tabelas_pedido.sql com tudo que ele usou para mapear o banco, util para subir migrations
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl_jpa_generate.sql

#flyway achar os arquivos
spring.flyway.locations=classpath:db/migration,classpath:db/teste-data

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

#isso serve para falhar sempre que em uma requisicao json
#receber argumentos que nao sao aceitos, ex: em um put de restaurante receber o campo
#descricao, sendo que nao tenho esse campo na model
spring.jackson.deserialization.fail-on-unknown-properties=true


#a nao deixa inserir os campos se eles estiverem com o JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true


#isso faz com que o spring lance uma exception quando um caminho que nao existe
#seja requisitado
spring.mvc.throw-exception-if-no-handler-found=true
#esse aqui desabilita arquivos staticos que podem atrapalhar nas requisicoes de path
spring.web.resources.add-mappings=false




#serve para mudar o tamanho maximo da requisicao por arquivo, padarao 1 mb
#spring.servlet.multipart.max-file-size=20KB
#tamanho maximo da requicisao completa, padrao 10mb
#spring.servlet.multipart.max-request-size=20MB



#minhas proprias variaveis
algafood.storage.local.diretorio-fotos=/Users/pinheiro/Downloads/download_testes/



#host smtp do servidor de email
spring.mail.host=smtp.sendgrid.net
spring.mail.port=587
spring.mail.username=apikey
# o certo é por a chave nas variaveis de ambiente do intelij ou qualquer outra ide/Producao/ test, só clicar na
# chave em baixo do play na parte de baixo
#spring.mail.password=essa_é_uma_chave_teste_enquanto_nao_sou_aprovado_no_sendgrid


algafood.email.remetente=Algafood <pinheiromikael96@gmail.com>


#configurar o envio de email
algafood.email.impl=FAKE

algafood.email.sandbox.destinatario=inglezinho1@gmail.com



#com isso eu adicionao v1 ao caminho base, e consigo versionar toda a api,
# deixei desativada pq se nao ia ter que refatorar os testes
#server.servlet.context-path=/v1


#usuario e senha padrao do basic autentication, codificar em base64 user:senha e mandar com
#Header Autorization e Basic antes do codigo, exemplo em listar cozinha
#spring.security.user.name=algafood
#spring.security.user.password=123456

#deixar comentado por hora, mas é da seguranca
#algafood.auth.provider-url=http://localhost:8080


#uri de quem assina o token
#spring.security.oauth2.resourceserver.opaque-token.introspection-uri=http://localhost:8081/oauth2/introspect
# id e senha do resource server(api) no server de autorizacao
#spring.security.oauth2.resourceserver.opaque-token.client-id=algafood-backend
#spring.security.oauth2.resourceserver.opaque-token.client-secret=123

#valida jwt, posso validar ou pelolink, que ele vai chamar o server auth, ou pela chave pub local
#openssl x509 -pubkey --noout  -in algafood-cert.pem > algafood_pub_key.pem -> serve para gerar a chave publica, a partir do certificado
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:9000/oauth2/jwks
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:key/algafood_pub_key.pem

# Security
#vamos passar a key store string (é um binario codificado em Base64) assim elimina a necessidade de um arquivo local
#implementei o protocolo pra ler o resource em base64, .jks é um formato binario
#algafood.jwt.keystore.jks-location=classpath:key/algafood.jks era assim, com um aquivo local
algafood.jwt.keystore.jks-location=base64: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
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/oauth2/jwks
algafood.jwt.keystore.password=123456
algafood.jwt.keystore.keypair-alias=algafood
algafood.auth.provider-url=http://localhost:8080



